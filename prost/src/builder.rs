//! Helpers for the generated builder API.

use alloc::vec::Vec;
use core::marker::PhantomData;

/// A polymorphic construction helper for repeated field values.
///
/// This type is used in builder APIs generated by prost-build.
/// A value can be converted from a `Vec` at zero cost with the [`From`]
/// implementation, or constructed from an iterator of source values
/// using the [`FromIterator`] implementation, conveniently invoked
/// via the [`Iterator::collect`] method.
pub struct RepeatedField<T, S = T> {
    values: Vec<T>,
    _phantom_source: PhantomData<S>,
}

impl<T, S> From<Vec<T>> for RepeatedField<T, S> {
    fn from(values: Vec<T>) -> Self {
        Self {
            values,
            _phantom_source: PhantomData,
        }
    }
}

impl<T, S> FromIterator<S> for RepeatedField<T, S>
where
    S: Into<T>,
{
    fn from_iter<I: IntoIterator<Item = S>>(iter: I) -> Self {
        let values = iter.into_iter().map(Into::into).collect();
        Self {
            values,
            _phantom_source: PhantomData,
        }
    }
}

impl<T, S> From<RepeatedField<T, S>> for Vec<T> {
    fn from(builder: RepeatedField<T, S>) -> Self {
        builder.values
    }
}
