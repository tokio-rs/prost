// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Test {
    #[prost(oneof = "test::Test3", tags = "4")]
    pub test3: ::core::option::Option<test::Test3>,
}
/// Nested message and enum types in `Test`.
pub mod test {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Test3 {
        #[deprecated]
        #[prost(string, tag = "4")]
        OneofOutdated(::prost::alloc::string::String),
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Test2 {
    #[deprecated]
    NotOutdated = 0,
    #[deprecated]
    Outdated = 1,
}
impl Test2 {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            #[allow(deprecated)]
            Test2::NotOutdated => "not_outdated",
            #[allow(deprecated)]
            Test2::Outdated => "outdated",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "not_outdated" => Some(#[allow(deprecated)] Self::NotOutdated),
            "outdated" => Some(#[allow(deprecated)] Self::Outdated),
            _ => None,
        }
    }
}
