// This file is @generated by prost-build.
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct EnumAndOneOfConflict {
    #[prost(oneof = "enum_and_one_of_conflict::TypeOneOf", tags = "1, 2, 3")]
    pub r#type: ::core::option::Option<enum_and_one_of_conflict::TypeOneOf>,
}
/// Nested message and enum types in `EnumAndOneOfConflict`.
pub mod enum_and_one_of_conflict {
    #[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
    pub struct TypeOne {
        #[prost(string, tag = "1")]
        pub field: ::prost::alloc::string::String,
    }
    #[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
    pub struct TypeTwo {
        #[prost(int32, tag = "1")]
        pub field: i32,
    }
    #[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
    pub struct TypeThree {
        #[prost(enumeration = "Type", tag = "1")]
        pub field: i32,
    }
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum Type {
        Type1 = 0,
        Type2 = 1,
    }
    impl Type {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Type1 => "TYPE_1",
                Self::Type2 => "TYPE_2",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "TYPE_1" => Some(Self::Type1),
                "TYPE_2" => Some(Self::Type2),
                _ => None,
            }
        }
    }
    #[derive(Clone, PartialEq, Eq, Hash, ::prost::Oneof)]
    pub enum TypeOneOf {
        #[prost(message, tag = "1")]
        TypeOne(TypeOne),
        #[prost(message, tag = "2")]
        TypeTwo(TypeTwo),
        #[prost(message, tag = "3")]
        TypeThree(TypeThree),
    }
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct NestedTypeAndOneOfConflict {
    #[prost(
        oneof = "nested_type_and_one_of_conflict::AbstractOneOf",
        tags = "1, 2, 3, 4"
    )]
    pub r#abstract: ::core::option::Option<
        nested_type_and_one_of_conflict::AbstractOneOf,
    >,
}
/// Nested message and enum types in `NestedTypeAndOneOfConflict`.
pub mod nested_type_and_one_of_conflict {
    #[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
    pub struct Abstract {
        #[prost(string, tag = "1")]
        pub field: ::prost::alloc::string::String,
    }
    #[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
    pub struct TypeOne {
        #[prost(string, tag = "1")]
        pub field: ::prost::alloc::string::String,
    }
    #[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
    pub struct TypeTwo {
        #[prost(int32, tag = "1")]
        pub field: i32,
    }
    #[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
    pub struct TypeThree {
        #[prost(message, optional, tag = "1")]
        pub field: ::core::option::Option<Abstract>,
    }
    #[derive(Clone, PartialEq, Eq, Hash, ::prost::Oneof)]
    pub enum AbstractOneOf {
        #[prost(message, tag = "1")]
        Abstract(Abstract),
        #[prost(message, tag = "2")]
        TypeOne(TypeOne),
        #[prost(message, tag = "3")]
        TypeTwo(TypeTwo),
        #[prost(message, tag = "4")]
        TypeThree(TypeThree),
    }
}
